{"remainingRequest":"/Users/chenyulei/Downloads/frontend18v/node_modules/thread-loader/dist/cjs.js!/Users/chenyulei/Downloads/frontend18v/node_modules/babel-loader/lib/index.js!/Users/chenyulei/Downloads/frontend18v/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/chenyulei/Downloads/frontend18v/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenyulei/Downloads/frontend18v/src/views/GraphView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chenyulei/Downloads/frontend18v/src/views/GraphView.vue","mtime":1553056840960},{"path":"/Users/chenyulei/Downloads/frontend18v/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyulei/Downloads/frontend18v/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyulei/Downloads/frontend18v/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chenyulei/Downloads/frontend18v/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyulei/Downloads/frontend18v/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/web.dom.iterable\";\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar axios = require('axios');\n\nvar some_data = {\n  \"nodes\": [{\n    \"id\": 1\n  }, {\n    \"id\": 2\n  }, {\n    \"id\": 3\n  }],\n  \"edges\": [{\n    \"source\": 1,\n    \"target\": 2\n  }, {\n    \"source\": 1,\n    \"target\": 3\n  }]\n};\nexport default {\n  name: 'graph',\n  data: function data() {\n    return {\n      colors: [\"#DD79FF\", \"#00FF30\", \"#5168FF\", \"#f83f00\", \"#ff8d8f\", \"#45b787\", \"#a7535a\", \"#ec8aa4\"],\n      nodeTypes: {},\n      nodeStyles: {},\n      labels: [],\n      refresh: false,\n      alchemy: '',\n      buttons: [],\n      propertyType: 'Container_Node',\n      propertyTexts: [{\n        id: 0,\n        key: 'test',\n        value: 'test'\n      }, {\n        id: 1,\n        key: 'test',\n        value: 'test'\n      }, {\n        id: 2,\n        key: 'test',\n        value: 'test'\n      }]\n    };\n  },\n  methods: {\n    labelClick: function labelClick(labelName) {\n      var _this = this;\n\n      var baseURL = '';\n\n      if (labelName == 'All_Nodes') {\n        baseURL = 'http://10.60.38.137:9999/api/getAll';\n      } else {\n        baseURL = 'http://10.60.38.137:9999/api/getLabel?label=' + labelName;\n      }\n\n      axios.get(baseURL).then(function (response) {\n        _this.alchemyStart(response);\n      });\n    },\n    setPropertyText: function setPropertyText(type, performance) {\n      console.log(type);\n      console.log(performance);\n      this.propertyType = type;\n      var tempText = 'type:test;property:test';\n      var tempTexts = [];\n      var index = 0;\n      performance.split(\";\").forEach(function (element) {\n        console.log(element);\n        console.log(element.split(\":\")[0]);\n        tempTexts.push({\n          id: index,\n          key: element.split(\":\")[0],\n          value: element.split(\":\")[1]\n        });\n        index = index + 1;\n      });\n      this.propertyTexts = tempTexts;\n      console.log(this.propertyTexts);\n    },\n    alchemyStart: function alchemyStart(response) {\n      var _this2 = this;\n\n      var nodes = response.data.nodes;\n      var edges = response.data.links;\n      var data = {\n        nodes: nodes,\n        edges: edges\n      };\n      console.log(data);\n      this.alchemy.begin({\n        // \"dataSource\": require('../assets/example.json')\n        \"dataSource\": data,\n        \"nodeCaption\": function nodeCaption(node) {\n          return node.name;\n        },\n        nodeCaptionsOnByDefault: true,\n        edgeCaption: function edgeCaption(node) {\n          return node.type;\n        },\n        forceLocked: false,\n        \"linkDistance\": function linkDistance() {\n          return 40;\n        },\n        nodeTypes: this.nodeTypes,\n        nodeStyle: this.nodeStyles,\n        nodeMouseOver: function nodeMouseOver(node) {\n          console.log(_this2.colors);\n          console.log(node);\n\n          _this2.setPropertyText(node._properties.type, node._properties.performance);\n\n          return 'node.performance';\n        }\n      });\n    }\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n\n    this.refresh = true;\n    this.alchemy = alchemy;\n    this.propertyType = '';\n    this.propertyTexts = []; // axios.get('/example.json')\n\n    axios.get('http://10.60.38.137:9999/api/getAll').then(function (response) {\n      console.log(response.data); // let nodes = response.data.nodes;\n      // let edges = response.data.links;\n      // let data = {\n      //     nodes: nodes,\n      //     edges: edges\n      // }\n      // console.log(data)\n      // this.alchemy.begin({\n      //     // \"dataSource\": require('../assets/example.json')\n      //     \"dataSource\": data,\n      //     \"nodeCaption\": function (node) {\n      //         return node.name;\n      //     },\n      //     nodeCaptionsOnByDefault: true,\n      //     edgeCaption: function (node) {\n      //         return node.type;\n      //     },\n      //     forceLocked: false,\n      //     \"linkDistance\": function () {\n      //         return 40;\n      //     },\n      // });\n\n      var rawResponse = response;\n      axios.get('http://10.60.38.137:9999/api/getAllLabel').then(function (response) {\n        _this3.labels = response.data.Label;\n        _this3.buttons = [];\n        var index = 0;\n\n        _this3.buttons.push({\n          name: 'All_Nodes'\n        });\n\n        _this3.labels.forEach(function (element) {\n          _this3.buttons.push({\n            name: element\n          });\n\n          _this3.nodeStyles[element] = {\n            \"color\": _this3.colors[index]\n          };\n          index = index + 1;\n        });\n\n        _this3.nodeTypes.type = _this3.labels;\n        console.log(_this3.nodeTypes);\n        console.log(_this3.nodeStyles);\n\n        _this3.alchemyStart(rawResponse);\n      });\n    });\n  }\n};",{"version":3,"sources":["GraphView.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <el-container style=\"width:100%\">\n\n        <el-col>\n            <el-row v-for=\"button in buttons\" :key=\"button.name\">\n                <el-button type=\"info\" plain style=\"margin:20px;\" @click=\"labelClick(button.name)\">{{button.name}}</el-button>\n            </el-row>\n        </el-col>\n\n        <el-col>\n            <el-row>\n                <div id=\"alchemy\" class=\"alchemy\" style=\"width:1520px;height:630px;\"></div>\n            </el-row>\n\n            <el-row style=\"margin-top:20px;padding-bottom:30px;\">\n                <el-tag type=\"warning\"> {{this.propertyType}}</el-tag>\n                <span style=\"margin-left:10px;\" v-for=\"propertyText in propertyTexts\" :key=\"propertyText.id\">\n                    <span style=\"font-weight:bold;\">{{propertyText.key}}: </span>\n                 \n                    <span>{{propertyText.value}}</span>\n                </span>\n            </el-row>\n        </el-col>\n\n\n    </el-container>\n</template>\n\n<style scoped>\n    /* @import \"/public/0.4.2/alchemy.css\" */\n</style>\n\n<script>\n    let axios = require('axios')\n    var some_data = {\n        \"nodes\": [{\n                \"id\": 1\n            },\n            {\n                \"id\": 2\n            },\n            {\n                \"id\": 3\n            }\n        ],\n        \"edges\": [{\n                \"source\": 1,\n                \"target\": 2\n            },\n            {\n                \"source\": 1,\n                \"target\": 3,\n            }\n        ]\n    };\n\n    export default {\n        name: 'graph',\n        data() {\n            return {\n                colors: [\"#DD79FF\", \"#00FF30\", \"#5168FF\", \"#f83f00\", \"#ff8d8f\", \"#45b787\", \"#a7535a\", \"#ec8aa4\"],\n                nodeTypes: {},\n                nodeStyles: {},\n                labels: [],\n                refresh: false,\n                alchemy: '',\n                buttons: [],\n                propertyType: 'Container_Node',\n                propertyTexts: [\n                    {\n                        id: 0,\n                        key: 'test',\n                        value: 'test'\n                    },\n                    {\n                        id: 1,\n                        key: 'test',\n                        value: 'test'\n                    },\n                    {\n                        id: 2,\n                        key: 'test',\n                        value: 'test'\n                    },\n                ],\n            }\n        },\n        methods: {\n            labelClick(labelName) {\n                let baseURL = ''\n                if (labelName == 'All_Nodes') {\n                    baseURL = 'http://10.60.38.137:9999/api/getAll'\n                } else {\n                    baseURL = 'http://10.60.38.137:9999/api/getLabel?label=' + labelName;\n                }\n                axios.get(baseURL)\n                    .then((response) => {\n                        this.alchemyStart(response);\n                    })\n            },\n            setPropertyText(type, performance) {\n                console.log(type)\n                console.log(performance)\n\n                this.propertyType = type;\n\n                let tempText = 'type:test;property:test';\n                let tempTexts = [];\n                let index = 0;\n                \n                performance.split(\";\").forEach(element => {\n                    console.log(element)\n                    console.log(element.split(\":\")[0])\n                    tempTexts.push({\n                        id: index,\n                        key: element.split(\":\")[0],\n                        value: element.split(\":\")[1],\n                    })\n                    index = index + 1;\n                });\n\n                this.propertyTexts = tempTexts;\n                console.log(this.propertyTexts)\n            },\n            alchemyStart(response) {\n                let nodes = response.data.nodes;\n                let edges = response.data.links;\n\n                let data = {\n                    nodes: nodes,\n                    edges: edges,\n                }\n\n                console.log(data)\n\n                this.alchemy.begin({\n                    // \"dataSource\": require('../assets/example.json')\n                    \"dataSource\": data,\n                    \"nodeCaption\": function (node) {\n                        return node.name;\n                    },\n                    nodeCaptionsOnByDefault: true,\n                    edgeCaption: function (node) {\n                        return node.type;\n                    },\n                    forceLocked: false,\n                    \"linkDistance\": function () {\n                        return 40;\n                    },\n                    nodeTypes: this.nodeTypes,\n                    nodeStyle: this.nodeStyles,\n                    nodeMouseOver: (node) => {\n                        console.log(this.colors);\n                        console.log(node)\n                        this.setPropertyText(node._properties.type, node._properties.performance);\n                        return 'node.performance';\n                    }\n                });\n            }\n        },\n        mounted() {\n            this.refresh = true;\n            this.alchemy = alchemy;\n\n            this.propertyType = '';\n            this.propertyTexts = [];\n\n            // axios.get('/example.json')\n            axios.get('http://10.60.38.137:9999/api/getAll')\n                .then((response) => {\n                    console.log(response.data)\n                    // let nodes = response.data.nodes;\n                    // let edges = response.data.links;\n\n                    // let data = {\n                    //     nodes: nodes,\n                    //     edges: edges\n                    // }\n\n                    // console.log(data)\n\n                    // this.alchemy.begin({\n                    //     // \"dataSource\": require('../assets/example.json')\n                    //     \"dataSource\": data,\n                    //     \"nodeCaption\": function (node) {\n                    //         return node.name;\n                    //     },\n                    //     nodeCaptionsOnByDefault: true,\n                    //     edgeCaption: function (node) {\n                    //         return node.type;\n                    //     },\n                    //     forceLocked: false,\n                    //     \"linkDistance\": function () {\n                    //         return 40;\n                    //     },\n\n                    // });\n\n                    let rawResponse = response;\n                    axios.get('http://10.60.38.137:9999/api/getAllLabel')\n                        .then((response) => {\n                            this.labels = response.data.Label;\n                            this.buttons = [];\n                            let index = 0;\n\n                            this.buttons.push({\n                                name: 'All_Nodes'\n                            });\n\n                            this.labels.forEach(element => {\n                                this.buttons.push({\n                                    name: element\n                                });\n\n                                this.nodeStyles[element] = {\n                                    \"color\": this.colors[index],\n                                }\n\n                                index = index + 1;\n                            });\n\n                            this.nodeTypes.type = this.labels;\n\n                            console.log(this.nodeTypes)\n                            console.log(this.nodeStyles)\n\n                            this.alchemyStart(rawResponse);\n                        })\n\n                })\n\n\n\n        }\n    }\n</script>"],"sourceRoot":"src/views"}]}