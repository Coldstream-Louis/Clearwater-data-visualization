{"remainingRequest":"/Users/chenyulei/Downloads/frontend18v/node_modules/thread-loader/dist/cjs.js!/Users/chenyulei/Downloads/frontend18v/node_modules/babel-loader/lib/index.js!/Users/chenyulei/Downloads/frontend18v/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/chenyulei/Downloads/frontend18v/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenyulei/Downloads/frontend18v/src/views/SeriesView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chenyulei/Downloads/frontend18v/src/views/SeriesView.vue","mtime":1553056840961},{"path":"/Users/chenyulei/Downloads/frontend18v/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyulei/Downloads/frontend18v/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyulei/Downloads/frontend18v/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chenyulei/Downloads/frontend18v/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyulei/Downloads/frontend18v/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar echarts = require('echarts');\n\nvar axios = require('axios'); // var cityOptions = ['Data1', 'Data2', 'Data3', 'Data4', 'Data5'];\n\n\nvar option = {\n  title: {\n    text: 'TestDiagram'\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  legend: {\n    data: ['Data1', 'Data2', 'Data3', 'Data4', 'Data5']\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '3%',\n    containLabel: true\n  },\n  toolbox: {\n    feature: {\n      saveAsImage: {}\n    }\n  },\n  xAxis: {\n    type: 'category',\n    boundaryGap: false,\n    data: ['Data1', 'Data2', 'Data3', 'Data4', 'Data5', 'Data6', 'Data7']\n  },\n  yAxis: {\n    type: 'value'\n  },\n  series: [{\n    name: 'Data1',\n    type: 'line',\n    stack: '总量',\n    data: [120, 132, 101, 134, 90, 230, 210]\n  }, {\n    name: 'Data2',\n    type: 'line',\n    stack: '总量',\n    data: [220, 182, 191, 234, 290, 330, 310]\n  }, {\n    name: 'Data3',\n    type: 'line',\n    stack: '总量',\n    data: [150, 232, 201, 154, 190, 330, 410]\n  }, {\n    name: 'Data4',\n    type: 'line',\n    stack: '总量',\n    data: [320, 332, 301, 334, 390, 330, 320]\n  }, {\n    name: 'Data5',\n    type: 'line',\n    stack: '总量',\n    data: [820, 932, 901, 934, 1290, 1330, 1320]\n  }]\n};\nexport default {\n  name: 'series',\n  data: function data() {\n    return {\n      loading: true,\n      datasetName: '',\n      datasets: [{\n        label: 'example.csv',\n        value: 'example.csv'\n      }],\n      checkAll: false,\n      checkedCities: ['Data1', 'Data2', 'Data3', 'Data4', 'Data5'],\n      cities: ['Data1', 'Data2', 'Data3', 'Data4', 'Data5'],\n      isIndeterminate: false,\n      myChart: '',\n      series: [{\n        name: 'Data1',\n        type: 'line',\n        stack: '总量',\n        data: [120, 132, 101, 134, 90, 230, 210]\n      }, {\n        name: 'Data2',\n        type: 'line',\n        stack: '总量',\n        data: [220, 182, 191, 234, 290, 330, 310]\n      }, {\n        name: 'Data3',\n        type: 'line',\n        stack: '总量',\n        data: [150, 232, 201, 154, 190, 330, 410]\n      }, {\n        name: 'Data4',\n        type: 'line',\n        stack: '总量',\n        data: [320, 332, 301, 334, 390, 330, 320]\n      }, {\n        name: 'Data5',\n        type: 'line',\n        stack: '总量',\n        data: [820, 932, 901, 934, 1290, 1330, 1320]\n      }]\n    };\n  },\n  methods: {\n    onDatasetChange: function onDatasetChange(value) {\n      var _this = this;\n\n      this.loading = true;\n\n      var initData = function initData() {\n        return axios.get('http://10.60.38.137:9999/api/getOperationData?filename=' + _this.datasetName);\n      };\n\n      var initTimeStamp = function initTimeStamp() {\n        return axios.get('http://10.60.38.137:9999/api/getTimestamp?filename=' + _this.datasetName);\n      }; // 获取数据集后，再申请数据。\n\n\n      axios.all([initData(), initTimeStamp()]).then(axios.spread(function (responseData, responseStamp) {\n        console.log(responseData.data); // responseData.data = JSON.parse(responseData.data)\n\n        var yData = responseData.data.Operations;\n        var yCData = [];\n        _this.checkedCities = [];\n        _this.cities = [];\n\n        for (var key in yData) {\n          var tempElement = {};\n\n          if (yData.hasOwnProperty(key)) {\n            var element = yData[key];\n            tempElement.name = key; // tempElement.name = tempElement.name.substring(15);\n\n            tempElement.data = element;\n            yCData.push(tempElement); // this.checkedCities.push(tempElement.name);\n\n            _this.cities.push(tempElement.name);\n          }\n        }\n\n        console.log(yData);\n        console.log(yCData);\n        yCData.forEach(function (element) {\n          element.type = 'line';\n          element.stack = '总量';\n        });\n        option.xAxis.data = responseStamp.data.TimeStamp;\n        option.series = yCData;\n        _this.series = yCData;\n\n        _this.myChart.setOption(option, {\n          notMerge: true\n        });\n\n        _this.loading = false;\n      }));\n    },\n    chartUpdate: function chartUpdate(value) {\n      var currentSeries = [];\n      console.log(value);\n      console.log('series', this.series);\n      this.series.forEach(function (serie) {\n        // serie.forEach(value => {\n        if (serie.name == value) {\n          currentSeries.push(serie);\n        } // });\n\n      });\n      option.series = currentSeries;\n      this.myChart.setOption(option, {\n        notMerge: true\n      });\n    },\n    handleCheckAllChange: function handleCheckAllChange(val) {\n      this.checkedCities = val ? this.cities : [];\n      this.isIndeterminate = false;\n      this.chartUpdate(this.checkedCities);\n    },\n    handleCheckedCitiesChange: function handleCheckedCitiesChange(inValue) {\n      // console.log(inValue)\n      var value = [].push(inValue);\n      var checkedCount = value.length;\n      this.checkAll = checkedCount === this.cities.length;\n      this.isIndeterminate = checkedCount > 0 && checkedCount < this.cities.length;\n      this.chartUpdate(inValue);\n      console.log('checkedcities');\n      console.log(this.checkedCities);\n    }\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    this.checkAll = true;\n    this.myChart = echarts.init(document.getElementById('chart')); // var myChart = echarts.init(this.$refs.chart);\n\n    this.myChart.setOption(option);\n    axios.get('http://10.60.38.137:9999/api/getCSV').then(function (response) {\n      var data = response.data.CSV;\n      _this2.datasets = [];\n      data.forEach(function (element) {\n        _this2.datasets.push({\n          label: element,\n          value: element\n        });\n      });\n      _this2.datasetName = _this2.datasets[0].label;\n\n      var initData = function initData() {\n        return axios.get('http://10.60.38.137:9999/api/getOperationData?filename=' + _this2.datasets[0].label);\n      };\n\n      var initTimeStamp = function initTimeStamp() {\n        return axios.get('http://10.60.38.137:9999/api/getTimestamp?filename=' + _this2.datasets[0].label);\n      }; // 获取数据集后，再申请数据。\n\n\n      axios.all([initData(), initTimeStamp()]).then(axios.spread(function (responseData, responseStamp) {\n        // console.log(responseData.data)\n        // responseData.data = JSON.parse(responseData.data)\n        var yData = responseData.data.Operations;\n        var yCData = [];\n        _this2.checkedCities = [];\n        _this2.cities = [];\n\n        for (var key in yData) {\n          var tempElement = {};\n\n          if (yData.hasOwnProperty(key)) {\n            var element = yData[key];\n            tempElement.name = key; // tempElement.name = tempElement.name.substring(15);\n\n            tempElement.data = element;\n            yCData.push(tempElement); // this.checkedCities.push(tempElement.name);\n\n            _this2.cities.push(tempElement.name);\n          }\n        } // console.log(yData)\n        // console.log(yCData)\n\n\n        yCData.forEach(function (element) {\n          element.type = 'line';\n          element.stack = '总量';\n        });\n        option.xAxis.data = responseStamp.data.TimeStamp;\n        option.series = yCData;\n        _this2.series = yCData;\n\n        _this2.myChart.setOption(option, {\n          notMerge: true\n        });\n\n        _this2.loading = false;\n      }));\n    });\n  }\n};",{"version":3,"sources":["SeriesView.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <el-container v-loading.fullscreen.lock=\"loading\">\n        <el-row style=\"width:100%;height:100%\">\n            <el-col :span=\"6\">\n                <el-row style=\"margin-left:10%;margin-top:20px;\">\n                    <el-select v-model=\"datasetName\" placeholder=\"请选择Dataset\" @change=\"onDatasetChange\">\n                        <el-option v-for=\"item in datasets\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\n                        </el-option>\n                    </el-select>\n                </el-row>\n\n\n                <el-col class=\"box2\" style=\"width:350px; height:700px;\">\n                    <el-col style=\"width:350px;height:650px; overflow-y:scroll; overflow-x:hidden;\">\n                        <!-- <el-checkbox :indeterminate=\"isIndeterminate\" v-model=\"checkAll\" @change=\"handleCheckAllChange\">全选</el-checkbox> -->\n                        <!-- <div style=\"margin: 15px 0;\"></div> -->\n                        <!-- <el-checkbox-group v-model=\"checkedCities\" @change=\"handleCheckedCitiesChange\" :min=\"0\" :max=\"1\">\n                            <el-checkbox v-for=\"city in cities\" :label=\"city\" :key=\"city\" style=\"margin-top:15px;\">{{city}}</el-checkbox>\n                        </el-checkbox-group> -->\n                        <el-radio-group v-model=\"checkedCities\" @change=\"handleCheckedCitiesChange\">\n                            <el-radio v-for=\"city in cities\" :label=\"city\" :key=\"city\" style=\"margin-top:15px;margin-left:0px;\">{{city}}</el-radio>\n                        </el-radio-group>\n                    </el-col>\n                </el-col>\n            </el-col>\n\n            <el-col style=\"height:600px;margin-left:8%;margin-top:30px;\" :span=\"16\">\n                <div refs=\"chart\" id=\"chart\" style=\"width:100%;height:100%\"></div>\n            </el-col>\n        </el-row>\n\n    </el-container>\n</template>\n\n<style scoped>\n    svg {\n        left: 50%;\n    }\n\n    .el-checkbox+.el-checkbox {\n        margin-left: 0px;\n    }\n\n    .box2 {\n        margin-top: 30px;\n        margin-left: 50px;\n        /* margin: 20px auto; */\n        width: 200px;\n        min-height: 500px;\n        padding: 10px;\n        position: relative;\n        background: -webkit-gradient(linear, 0% 20%, 0% 92%, from(#c7ecf59a), to(rgb(236, 246, 248)), color-stop(.1, #c7ecf59a));\n        border-top: 1px solid #ccc;\n        border-right: 1px solid #ccc;\n        -webkit-border-bottom-right-radius: 60px 60px;\n        -webkit-box-shadow: -1px 2px 2px rgba(0, 0, 0, 0.2);\n    }\n\n    .box2:before {\n        content: '';\n        width: 25px;\n        height: 20px;\n        position: absolute;\n        bottom: 0;\n        right: 0;\n        -webkit-border-bottom-right-radius: 30px;\n        -webkit-box-shadow: -2px -2px 5px rgba(0, 0, 0, 0.3);\n        -webkit-transform:\n            rotate(-20deg) skew(-40deg, -3deg) translate(-13px, -13px);\n    }\n</style>\n\n<script>\n    const echarts = require('echarts');\n    const axios = require('axios');\n    // var cityOptions = ['Data1', 'Data2', 'Data3', 'Data4', 'Data5'];\n\n    var option = {\n        title: {\n            text: 'TestDiagram'\n        },\n        tooltip: {\n            trigger: 'axis'\n        },\n        legend: {\n            data: ['Data1', 'Data2', 'Data3', 'Data4', 'Data5']\n        },\n        grid: {\n            left: '3%',\n            right: '4%',\n            bottom: '3%',\n            containLabel: true\n        },\n        toolbox: {\n            feature: {\n                saveAsImage: {}\n            }\n        },\n        xAxis: {\n            type: 'category',\n            boundaryGap: false,\n            data: ['Data1', 'Data2', 'Data3', 'Data4', 'Data5', 'Data6', 'Data7']\n        },\n        yAxis: {\n            type: 'value'\n        },\n        series: [{\n                name: 'Data1',\n                type: 'line',\n                stack: '总量',\n                data: [120, 132, 101, 134, 90, 230, 210]\n            },\n            {\n                name: 'Data2',\n                type: 'line',\n                stack: '总量',\n                data: [220, 182, 191, 234, 290, 330, 310]\n            },\n            {\n                name: 'Data3',\n                type: 'line',\n                stack: '总量',\n                data: [150, 232, 201, 154, 190, 330, 410]\n            },\n            {\n                name: 'Data4',\n                type: 'line',\n                stack: '总量',\n                data: [320, 332, 301, 334, 390, 330, 320]\n            },\n            {\n                name: 'Data5',\n                type: 'line',\n                stack: '总量',\n                data: [820, 932, 901, 934, 1290, 1330, 1320]\n            }\n        ]\n    };\n    export default {\n        name: 'series',\n        data() {\n            return {\n                loading: true,\n                datasetName: '',\n                datasets: [{\n                    label: 'example.csv',\n                    value: 'example.csv'\n                }],\n                checkAll: false,\n                checkedCities: ['Data1', 'Data2', 'Data3', 'Data4', 'Data5'],\n                cities: ['Data1', 'Data2', 'Data3', 'Data4', 'Data5'],\n                isIndeterminate: false,\n                myChart: '',\n                series: [{\n                        name: 'Data1',\n                        type: 'line',\n                        stack: '总量',\n                        data: [120, 132, 101, 134, 90, 230, 210]\n                    },\n                    {\n                        name: 'Data2',\n                        type: 'line',\n                        stack: '总量',\n                        data: [220, 182, 191, 234, 290, 330, 310]\n                    },\n                    {\n                        name: 'Data3',\n                        type: 'line',\n                        stack: '总量',\n                        data: [150, 232, 201, 154, 190, 330, 410]\n                    },\n                    {\n                        name: 'Data4',\n                        type: 'line',\n                        stack: '总量',\n                        data: [320, 332, 301, 334, 390, 330, 320]\n                    },\n                    {\n                        name: 'Data5',\n                        type: 'line',\n                        stack: '总量',\n                        data: [820, 932, 901, 934, 1290, 1330, 1320]\n                    }\n                ]\n            };\n        },\n        methods: {\n            onDatasetChange(value) {\n                this.loading = true;\n                let initData = () => {\n                    return axios.get('http://10.60.38.137:9999/api/getOperationData?filename=' + this.datasetName);\n                }\n\n                let initTimeStamp = () => {\n                    return axios.get('http://10.60.38.137:9999/api/getTimestamp?filename=' + this.datasetName);\n                }\n\n                // 获取数据集后，再申请数据。\n                axios.all([initData(), initTimeStamp()])\n                    .then(axios.spread((responseData, responseStamp) => {\n                        console.log(responseData.data)\n                        // responseData.data = JSON.parse(responseData.data)\n                        let yData = responseData.data.Operations;\n                        let yCData = [];\n                        this.checkedCities = [];\n                        this.cities = [];\n\n                        for (const key in yData) {\n                            var tempElement = {}\n                            if (yData.hasOwnProperty(key)) {\n                                const element = yData[key];\n                                tempElement.name = key;\n                                // tempElement.name = tempElement.name.substring(15);\n                                tempElement.data = element;\n\n                                yCData.push(tempElement)\n                                // this.checkedCities.push(tempElement.name);\n                                this.cities.push(tempElement.name);\n                            }\n                        }\n                        console.log(yData)\n                        console.log(yCData)\n                        yCData.forEach(element => {\n                            element.type = 'line';\n                            element.stack = '总量';\n                        });\n\n                        option.xAxis.data = responseStamp.data.TimeStamp;\n\n                        option.series = yCData;\n                        this.series = yCData;\n                        this.myChart.setOption(option, {\n                            notMerge: true\n                        });\n\n                        this.loading = false;\n                    }))\n            },\n            chartUpdate(value) {\n                let currentSeries = []\n                console.log(value)\n                console.log('series', this.series)\n                this.series.forEach(serie => {\n                    // serie.forEach(value => {\n                    if (serie.name == value) {\n                        currentSeries.push(serie)\n                    }\n                    // });\n                });\n\n                option.series = currentSeries;\n\n                this.myChart.setOption(option, {\n                    notMerge: true\n                });\n            },\n            handleCheckAllChange(val) {\n                this.checkedCities = val ? this.cities : [];\n                this.isIndeterminate = false;\n\n                this.chartUpdate(this.checkedCities);\n            },\n            handleCheckedCitiesChange(inValue) {\n                // console.log(inValue)\n                let value = [].push(inValue);\n                let checkedCount = value.length;\n                this.checkAll = checkedCount === this.cities.length;\n                this.isIndeterminate = checkedCount > 0 && checkedCount < this.cities.length;\n\n                this.chartUpdate(inValue);\n                console.log('checkedcities')\n                console.log(this.checkedCities)\n            }\n        },\n        mounted() {\n            this.checkAll = true;\n            this.myChart = echarts.init(document.getElementById('chart'));\n            // var myChart = echarts.init(this.$refs.chart);\n\n            this.myChart.setOption(option);\n\n            axios.get('http://10.60.38.137:9999/api/getCSV').then((response) => {\n                let data = response.data.CSV;\n                this.datasets = []\n\n                data.forEach(element => {\n                    this.datasets.push({\n                        label: element,\n                        value: element\n                    })\n                });\n                this.datasetName = this.datasets[0].label;\n\n                let initData = () => {\n                    return axios.get('http://10.60.38.137:9999/api/getOperationData?filename=' + this.datasets[\n                        0].label);\n                }\n\n                let initTimeStamp = () => {\n                    return axios.get('http://10.60.38.137:9999/api/getTimestamp?filename=' + this.datasets[\n                        0].label);\n                }\n\n                // 获取数据集后，再申请数据。\n                axios.all([initData(), initTimeStamp()])\n                    .then(axios.spread(\n                        (responseData, responseStamp) => {\n                            // console.log(responseData.data)\n                            // responseData.data = JSON.parse(responseData.data)\n                            let yData = responseData.data.Operations;\n                            let yCData = [];\n                            this.checkedCities = [];\n                            this.cities = [];\n\n                            for (const key in yData) {\n                                var tempElement = {}\n                                if (yData.hasOwnProperty(key)) {\n                                    const element = yData[key];\n                                    tempElement.name = key;\n                                    // tempElement.name = tempElement.name.substring(15);\n                                    tempElement.data = element;\n\n                                    yCData.push(tempElement)\n                                    // this.checkedCities.push(tempElement.name);\n                                    this.cities.push(tempElement.name);\n                                }\n                            }\n                            // console.log(yData)\n                            // console.log(yCData)\n                            yCData.forEach(element => {\n                                element.type = 'line';\n                                element.stack = '总量';\n                            });\n\n                            option.xAxis.data = responseStamp.data.TimeStamp;\n\n                            option.series = yCData;\n                            this.series = yCData;\n                            this.myChart.setOption(option, {\n                                notMerge: true\n                            });\n\n                            this.loading = false;\n                        }))\n            })\n\n\n\n\n\n\n        }\n    }\n</script>"],"sourceRoot":"src/views"}]}