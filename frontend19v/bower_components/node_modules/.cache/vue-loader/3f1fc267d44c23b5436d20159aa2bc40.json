{"remainingRequest":"/Users/chenyulei/Downloads/frontend18v/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenyulei/Downloads/frontend18v/src/views/GraphView.vue?vue&type=style&index=0&id=7b754e28&scoped=true&lang=css&","dependencies":[{"path":"/Users/chenyulei/Downloads/frontend18v/src/views/GraphView.vue","mtime":1553056840960},{"path":"/Users/chenyulei/Downloads/frontend18v/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/chenyulei/Downloads/frontend18v/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/chenyulei/Downloads/frontend18v/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/chenyulei/Downloads/frontend18v/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyulei/Downloads/frontend18v/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* @import \"/public/0.4.2/alchemy.css\" */\n",{"version":3,"sources":["GraphView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA","file":"GraphView.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <el-container style=\"width:100%\">\n\n        <el-col>\n            <el-row v-for=\"button in buttons\" :key=\"button.name\">\n                <el-button type=\"info\" plain style=\"margin:20px;\" @click=\"labelClick(button.name)\">{{button.name}}</el-button>\n            </el-row>\n        </el-col>\n\n        <el-col>\n            <el-row>\n                <div id=\"alchemy\" class=\"alchemy\" style=\"width:1520px;height:630px;\"></div>\n            </el-row>\n\n            <el-row style=\"margin-top:20px;padding-bottom:30px;\">\n                <el-tag type=\"warning\"> {{this.propertyType}}</el-tag>\n                <span style=\"margin-left:10px;\" v-for=\"propertyText in propertyTexts\" :key=\"propertyText.id\">\n                    <span style=\"font-weight:bold;\">{{propertyText.key}}: </span>\n                 \n                    <span>{{propertyText.value}}</span>\n                </span>\n            </el-row>\n        </el-col>\n\n\n    </el-container>\n</template>\n\n<style scoped>\n    /* @import \"/public/0.4.2/alchemy.css\" */\n</style>\n\n<script>\n    let axios = require('axios')\n    var some_data = {\n        \"nodes\": [{\n                \"id\": 1\n            },\n            {\n                \"id\": 2\n            },\n            {\n                \"id\": 3\n            }\n        ],\n        \"edges\": [{\n                \"source\": 1,\n                \"target\": 2\n            },\n            {\n                \"source\": 1,\n                \"target\": 3,\n            }\n        ]\n    };\n\n    export default {\n        name: 'graph',\n        data() {\n            return {\n                colors: [\"#DD79FF\", \"#00FF30\", \"#5168FF\", \"#f83f00\", \"#ff8d8f\", \"#45b787\", \"#a7535a\", \"#ec8aa4\"],\n                nodeTypes: {},\n                nodeStyles: {},\n                labels: [],\n                refresh: false,\n                alchemy: '',\n                buttons: [],\n                propertyType: 'Container_Node',\n                propertyTexts: [\n                    {\n                        id: 0,\n                        key: 'test',\n                        value: 'test'\n                    },\n                    {\n                        id: 1,\n                        key: 'test',\n                        value: 'test'\n                    },\n                    {\n                        id: 2,\n                        key: 'test',\n                        value: 'test'\n                    },\n                ],\n            }\n        },\n        methods: {\n            labelClick(labelName) {\n                let baseURL = ''\n                if (labelName == 'All_Nodes') {\n                    baseURL = 'http://10.60.38.137:9999/api/getAll'\n                } else {\n                    baseURL = 'http://10.60.38.137:9999/api/getLabel?label=' + labelName;\n                }\n                axios.get(baseURL)\n                    .then((response) => {\n                        this.alchemyStart(response);\n                    })\n            },\n            setPropertyText(type, performance) {\n                console.log(type)\n                console.log(performance)\n\n                this.propertyType = type;\n\n                let tempText = 'type:test;property:test';\n                let tempTexts = [];\n                let index = 0;\n                \n                performance.split(\";\").forEach(element => {\n                    console.log(element)\n                    console.log(element.split(\":\")[0])\n                    tempTexts.push({\n                        id: index,\n                        key: element.split(\":\")[0],\n                        value: element.split(\":\")[1],\n                    })\n                    index = index + 1;\n                });\n\n                this.propertyTexts = tempTexts;\n                console.log(this.propertyTexts)\n            },\n            alchemyStart(response) {\n                let nodes = response.data.nodes;\n                let edges = response.data.links;\n\n                let data = {\n                    nodes: nodes,\n                    edges: edges,\n                }\n\n                console.log(data)\n\n                this.alchemy.begin({\n                    // \"dataSource\": require('../assets/example.json')\n                    \"dataSource\": data,\n                    \"nodeCaption\": function (node) {\n                        return node.name;\n                    },\n                    nodeCaptionsOnByDefault: true,\n                    edgeCaption: function (node) {\n                        return node.type;\n                    },\n                    forceLocked: false,\n                    \"linkDistance\": function () {\n                        return 40;\n                    },\n                    nodeTypes: this.nodeTypes,\n                    nodeStyle: this.nodeStyles,\n                    nodeMouseOver: (node) => {\n                        console.log(this.colors);\n                        console.log(node)\n                        this.setPropertyText(node._properties.type, node._properties.performance);\n                        return 'node.performance';\n                    }\n                });\n            }\n        },\n        mounted() {\n            this.refresh = true;\n            this.alchemy = alchemy;\n\n            this.propertyType = '';\n            this.propertyTexts = [];\n\n            // axios.get('/example.json')\n            axios.get('http://10.60.38.137:9999/api/getAll')\n                .then((response) => {\n                    console.log(response.data)\n                    // let nodes = response.data.nodes;\n                    // let edges = response.data.links;\n\n                    // let data = {\n                    //     nodes: nodes,\n                    //     edges: edges\n                    // }\n\n                    // console.log(data)\n\n                    // this.alchemy.begin({\n                    //     // \"dataSource\": require('../assets/example.json')\n                    //     \"dataSource\": data,\n                    //     \"nodeCaption\": function (node) {\n                    //         return node.name;\n                    //     },\n                    //     nodeCaptionsOnByDefault: true,\n                    //     edgeCaption: function (node) {\n                    //         return node.type;\n                    //     },\n                    //     forceLocked: false,\n                    //     \"linkDistance\": function () {\n                    //         return 40;\n                    //     },\n\n                    // });\n\n                    let rawResponse = response;\n                    axios.get('http://10.60.38.137:9999/api/getAllLabel')\n                        .then((response) => {\n                            this.labels = response.data.Label;\n                            this.buttons = [];\n                            let index = 0;\n\n                            this.buttons.push({\n                                name: 'All_Nodes'\n                            });\n\n                            this.labels.forEach(element => {\n                                this.buttons.push({\n                                    name: element\n                                });\n\n                                this.nodeStyles[element] = {\n                                    \"color\": this.colors[index],\n                                }\n\n                                index = index + 1;\n                            });\n\n                            this.nodeTypes.type = this.labels;\n\n                            console.log(this.nodeTypes)\n                            console.log(this.nodeStyles)\n\n                            this.alchemyStart(rawResponse);\n                        })\n\n                })\n\n\n\n        }\n    }\n</script>"]}]}