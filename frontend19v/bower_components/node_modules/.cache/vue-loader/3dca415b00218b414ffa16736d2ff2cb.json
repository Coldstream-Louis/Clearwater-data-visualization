{"remainingRequest":"/Users/chenyulei/Downloads/frontend18v/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenyulei/Downloads/frontend18v/src/views/SeriesView.vue?vue&type=style&index=0&id=7f0c6389&scoped=true&lang=css&","dependencies":[{"path":"/Users/chenyulei/Downloads/frontend18v/src/views/SeriesView.vue","mtime":1553056840961},{"path":"/Users/chenyulei/Downloads/frontend18v/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/chenyulei/Downloads/frontend18v/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/chenyulei/Downloads/frontend18v/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/chenyulei/Downloads/frontend18v/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyulei/Downloads/frontend18v/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsvg {\n    left: 50%;\n}\n\n.el-checkbox+.el-checkbox {\n    margin-left: 0px;\n}\n\n.box2 {\n    margin-top: 30px;\n    margin-left: 50px;\n    /* margin: 20px auto; */\n    width: 200px;\n    min-height: 500px;\n    padding: 10px;\n    position: relative;\n    background: -webkit-gradient(linear, 0% 20%, 0% 92%, from(#c7ecf59a), to(rgb(236, 246, 248)), color-stop(.1, #c7ecf59a));\n    border-top: 1px solid #ccc;\n    border-right: 1px solid #ccc;\n    -webkit-border-bottom-right-radius: 60px 60px;\n    -webkit-box-shadow: -1px 2px 2px rgba(0, 0, 0, 0.2);\n}\n\n.box2:before {\n    content: '';\n    width: 25px;\n    height: 20px;\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    -webkit-border-bottom-right-radius: 30px;\n    -webkit-box-shadow: -2px -2px 5px rgba(0, 0, 0, 0.3);\n    -webkit-transform:\n        rotate(-20deg) skew(-40deg, -3deg) translate(-13px, -13px);\n}\n",{"version":3,"sources":["SeriesView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SeriesView.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <el-container v-loading.fullscreen.lock=\"loading\">\n        <el-row style=\"width:100%;height:100%\">\n            <el-col :span=\"6\">\n                <el-row style=\"margin-left:10%;margin-top:20px;\">\n                    <el-select v-model=\"datasetName\" placeholder=\"请选择Dataset\" @change=\"onDatasetChange\">\n                        <el-option v-for=\"item in datasets\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\n                        </el-option>\n                    </el-select>\n                </el-row>\n\n\n                <el-col class=\"box2\" style=\"width:350px; height:700px;\">\n                    <el-col style=\"width:350px;height:650px; overflow-y:scroll; overflow-x:hidden;\">\n                        <!-- <el-checkbox :indeterminate=\"isIndeterminate\" v-model=\"checkAll\" @change=\"handleCheckAllChange\">全选</el-checkbox> -->\n                        <!-- <div style=\"margin: 15px 0;\"></div> -->\n                        <!-- <el-checkbox-group v-model=\"checkedCities\" @change=\"handleCheckedCitiesChange\" :min=\"0\" :max=\"1\">\n                            <el-checkbox v-for=\"city in cities\" :label=\"city\" :key=\"city\" style=\"margin-top:15px;\">{{city}}</el-checkbox>\n                        </el-checkbox-group> -->\n                        <el-radio-group v-model=\"checkedCities\" @change=\"handleCheckedCitiesChange\">\n                            <el-radio v-for=\"city in cities\" :label=\"city\" :key=\"city\" style=\"margin-top:15px;margin-left:0px;\">{{city}}</el-radio>\n                        </el-radio-group>\n                    </el-col>\n                </el-col>\n            </el-col>\n\n            <el-col style=\"height:600px;margin-left:8%;margin-top:30px;\" :span=\"16\">\n                <div refs=\"chart\" id=\"chart\" style=\"width:100%;height:100%\"></div>\n            </el-col>\n        </el-row>\n\n    </el-container>\n</template>\n\n<style scoped>\n    svg {\n        left: 50%;\n    }\n\n    .el-checkbox+.el-checkbox {\n        margin-left: 0px;\n    }\n\n    .box2 {\n        margin-top: 30px;\n        margin-left: 50px;\n        /* margin: 20px auto; */\n        width: 200px;\n        min-height: 500px;\n        padding: 10px;\n        position: relative;\n        background: -webkit-gradient(linear, 0% 20%, 0% 92%, from(#c7ecf59a), to(rgb(236, 246, 248)), color-stop(.1, #c7ecf59a));\n        border-top: 1px solid #ccc;\n        border-right: 1px solid #ccc;\n        -webkit-border-bottom-right-radius: 60px 60px;\n        -webkit-box-shadow: -1px 2px 2px rgba(0, 0, 0, 0.2);\n    }\n\n    .box2:before {\n        content: '';\n        width: 25px;\n        height: 20px;\n        position: absolute;\n        bottom: 0;\n        right: 0;\n        -webkit-border-bottom-right-radius: 30px;\n        -webkit-box-shadow: -2px -2px 5px rgba(0, 0, 0, 0.3);\n        -webkit-transform:\n            rotate(-20deg) skew(-40deg, -3deg) translate(-13px, -13px);\n    }\n</style>\n\n<script>\n    const echarts = require('echarts');\n    const axios = require('axios');\n    // var cityOptions = ['Data1', 'Data2', 'Data3', 'Data4', 'Data5'];\n\n    var option = {\n        title: {\n            text: 'TestDiagram'\n        },\n        tooltip: {\n            trigger: 'axis'\n        },\n        legend: {\n            data: ['Data1', 'Data2', 'Data3', 'Data4', 'Data5']\n        },\n        grid: {\n            left: '3%',\n            right: '4%',\n            bottom: '3%',\n            containLabel: true\n        },\n        toolbox: {\n            feature: {\n                saveAsImage: {}\n            }\n        },\n        xAxis: {\n            type: 'category',\n            boundaryGap: false,\n            data: ['Data1', 'Data2', 'Data3', 'Data4', 'Data5', 'Data6', 'Data7']\n        },\n        yAxis: {\n            type: 'value'\n        },\n        series: [{\n                name: 'Data1',\n                type: 'line',\n                stack: '总量',\n                data: [120, 132, 101, 134, 90, 230, 210]\n            },\n            {\n                name: 'Data2',\n                type: 'line',\n                stack: '总量',\n                data: [220, 182, 191, 234, 290, 330, 310]\n            },\n            {\n                name: 'Data3',\n                type: 'line',\n                stack: '总量',\n                data: [150, 232, 201, 154, 190, 330, 410]\n            },\n            {\n                name: 'Data4',\n                type: 'line',\n                stack: '总量',\n                data: [320, 332, 301, 334, 390, 330, 320]\n            },\n            {\n                name: 'Data5',\n                type: 'line',\n                stack: '总量',\n                data: [820, 932, 901, 934, 1290, 1330, 1320]\n            }\n        ]\n    };\n    export default {\n        name: 'series',\n        data() {\n            return {\n                loading: true,\n                datasetName: '',\n                datasets: [{\n                    label: 'example.csv',\n                    value: 'example.csv'\n                }],\n                checkAll: false,\n                checkedCities: ['Data1', 'Data2', 'Data3', 'Data4', 'Data5'],\n                cities: ['Data1', 'Data2', 'Data3', 'Data4', 'Data5'],\n                isIndeterminate: false,\n                myChart: '',\n                series: [{\n                        name: 'Data1',\n                        type: 'line',\n                        stack: '总量',\n                        data: [120, 132, 101, 134, 90, 230, 210]\n                    },\n                    {\n                        name: 'Data2',\n                        type: 'line',\n                        stack: '总量',\n                        data: [220, 182, 191, 234, 290, 330, 310]\n                    },\n                    {\n                        name: 'Data3',\n                        type: 'line',\n                        stack: '总量',\n                        data: [150, 232, 201, 154, 190, 330, 410]\n                    },\n                    {\n                        name: 'Data4',\n                        type: 'line',\n                        stack: '总量',\n                        data: [320, 332, 301, 334, 390, 330, 320]\n                    },\n                    {\n                        name: 'Data5',\n                        type: 'line',\n                        stack: '总量',\n                        data: [820, 932, 901, 934, 1290, 1330, 1320]\n                    }\n                ]\n            };\n        },\n        methods: {\n            onDatasetChange(value) {\n                this.loading = true;\n                let initData = () => {\n                    return axios.get('http://10.60.38.137:9999/api/getOperationData?filename=' + this.datasetName);\n                }\n\n                let initTimeStamp = () => {\n                    return axios.get('http://10.60.38.137:9999/api/getTimestamp?filename=' + this.datasetName);\n                }\n\n                // 获取数据集后，再申请数据。\n                axios.all([initData(), initTimeStamp()])\n                    .then(axios.spread((responseData, responseStamp) => {\n                        console.log(responseData.data)\n                        // responseData.data = JSON.parse(responseData.data)\n                        let yData = responseData.data.Operations;\n                        let yCData = [];\n                        this.checkedCities = [];\n                        this.cities = [];\n\n                        for (const key in yData) {\n                            var tempElement = {}\n                            if (yData.hasOwnProperty(key)) {\n                                const element = yData[key];\n                                tempElement.name = key;\n                                // tempElement.name = tempElement.name.substring(15);\n                                tempElement.data = element;\n\n                                yCData.push(tempElement)\n                                // this.checkedCities.push(tempElement.name);\n                                this.cities.push(tempElement.name);\n                            }\n                        }\n                        console.log(yData)\n                        console.log(yCData)\n                        yCData.forEach(element => {\n                            element.type = 'line';\n                            element.stack = '总量';\n                        });\n\n                        option.xAxis.data = responseStamp.data.TimeStamp;\n\n                        option.series = yCData;\n                        this.series = yCData;\n                        this.myChart.setOption(option, {\n                            notMerge: true\n                        });\n\n                        this.loading = false;\n                    }))\n            },\n            chartUpdate(value) {\n                let currentSeries = []\n                console.log(value)\n                console.log('series', this.series)\n                this.series.forEach(serie => {\n                    // serie.forEach(value => {\n                    if (serie.name == value) {\n                        currentSeries.push(serie)\n                    }\n                    // });\n                });\n\n                option.series = currentSeries;\n\n                this.myChart.setOption(option, {\n                    notMerge: true\n                });\n            },\n            handleCheckAllChange(val) {\n                this.checkedCities = val ? this.cities : [];\n                this.isIndeterminate = false;\n\n                this.chartUpdate(this.checkedCities);\n            },\n            handleCheckedCitiesChange(inValue) {\n                // console.log(inValue)\n                let value = [].push(inValue);\n                let checkedCount = value.length;\n                this.checkAll = checkedCount === this.cities.length;\n                this.isIndeterminate = checkedCount > 0 && checkedCount < this.cities.length;\n\n                this.chartUpdate(inValue);\n                console.log('checkedcities')\n                console.log(this.checkedCities)\n            }\n        },\n        mounted() {\n            this.checkAll = true;\n            this.myChart = echarts.init(document.getElementById('chart'));\n            // var myChart = echarts.init(this.$refs.chart);\n\n            this.myChart.setOption(option);\n\n            axios.get('http://10.60.38.137:9999/api/getCSV').then((response) => {\n                let data = response.data.CSV;\n                this.datasets = []\n\n                data.forEach(element => {\n                    this.datasets.push({\n                        label: element,\n                        value: element\n                    })\n                });\n                this.datasetName = this.datasets[0].label;\n\n                let initData = () => {\n                    return axios.get('http://10.60.38.137:9999/api/getOperationData?filename=' + this.datasets[\n                        0].label);\n                }\n\n                let initTimeStamp = () => {\n                    return axios.get('http://10.60.38.137:9999/api/getTimestamp?filename=' + this.datasets[\n                        0].label);\n                }\n\n                // 获取数据集后，再申请数据。\n                axios.all([initData(), initTimeStamp()])\n                    .then(axios.spread(\n                        (responseData, responseStamp) => {\n                            // console.log(responseData.data)\n                            // responseData.data = JSON.parse(responseData.data)\n                            let yData = responseData.data.Operations;\n                            let yCData = [];\n                            this.checkedCities = [];\n                            this.cities = [];\n\n                            for (const key in yData) {\n                                var tempElement = {}\n                                if (yData.hasOwnProperty(key)) {\n                                    const element = yData[key];\n                                    tempElement.name = key;\n                                    // tempElement.name = tempElement.name.substring(15);\n                                    tempElement.data = element;\n\n                                    yCData.push(tempElement)\n                                    // this.checkedCities.push(tempElement.name);\n                                    this.cities.push(tempElement.name);\n                                }\n                            }\n                            // console.log(yData)\n                            // console.log(yCData)\n                            yCData.forEach(element => {\n                                element.type = 'line';\n                                element.stack = '总量';\n                            });\n\n                            option.xAxis.data = responseStamp.data.TimeStamp;\n\n                            option.series = yCData;\n                            this.series = yCData;\n                            this.myChart.setOption(option, {\n                                notMerge: true\n                            });\n\n                            this.loading = false;\n                        }))\n            })\n\n\n\n\n\n\n        }\n    }\n</script>"]}]}